//Town, Community and Centre data import script
LOAD CSV WITH HEADERS FROM "file:///Centres-Table.csv" as line
MERGE(t:Town {name: line.Town})
SET 
	t.townID = apoc.create.uuid()
MERGE(C: Community {name: line.Community})
	ON CREATE SET
   C.communityID = apoc.create.uuid()
MERGE(t)-[:HAS_COMMUNITY]->(C)
MERGE(cen: Centre{name:line.centreName})
	ON CREATE SET 
    cen.centreCode = line.centreCode
MERGE(C)-[:HAS_CENTRE]->(cen)


//firstlove membership data Import script
LOAD CSV WITH HEADERS FROM "file:///Members.csv" as line
CREATE(m:Member {memberId: apoc.create.uuid()})
	SET 
    m.firstName = line.firstName,
    m.lastName = line.lastName,
    m.email = line.email,
    m.phoneNumber = line.phoneNumber,
    m.centre = line.centreCode,
    m.whatsAppNumber = line.whatsappNumber
 

MERGE(g: Gender {gender: line.gender})
MERGE(m)-[:HAS_GENDER]->(g)

MERGE(ms: MaritalStatus {status: line.maritalStatus})
MERGE(m)-[:IS]->(ms)

with line WHERE line.occupation is not null
MERGE(O:Occupation {occupation: line.occupation})
MERGE(m)-[:HAS_OCCUPATION]->(O)

with line
MERGE(d: Date{date:line.dob})
MERGE(m)-[:WAS_BORN_ON]->(d)

with line WHERE line.Rank is not null
MERGE(l: Leader{rank: line.Rank})
MERGE(m)-[:IS_A]->(l)

with line
MERGE(b:Bacenta {name:line.bacenta})
MERGE(m)-[:BELONGS_TO]->(b)

WITH line
MATCH(cen:Centre {centreCode: line.centreCode}),(m: Member{centre: cen.centreCode})
WITH cen, m, line
MERGE(m)-[:BELONGS_TO]->(cen)

with line, m  WHERE line.ministry is not null
MERGE(S: Sonta {name:line.ministry})

with line, m
MERGE(m)-[:BELONGS_TO]->(S);

MATCH(m:Member),(c:Centre)
where m.centre = c.centreCode
with m, c
MERGE(m)-[:BELONGS_TO]->(c)
return m


// Count Members within each centre
MATCH(m:Member)--(c:Centre)
RETURN c.name AS CENTRE, COUNT(m) AS MEMBERS


//Delete all Entries
match (n)
detach delete n