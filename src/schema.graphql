type Member {
	memberID: ID!
	firstName: String
	lastName: String
	email: String
	phoneNumber: String
	whatsAppNumber: String
	dob: TimeGraph @relation(name: "WAS_BORN_ON", direction: "OUT")
	#leader: [Leader] @relation(name: "IS_A", direction: "OUT")
	ministry: [Sonta] @relation(name: "BELONGS_TO", direction: "OUT")
	occupation: [Occupation] @relation(name: "HAS_OCCUPATION", direction: "OUT")
	bacenta: [Bacenta] @relation(name: "BELONGS_TO", direction: "OUT")
	#centre: Centre @relation(name: "BELONGS_TO", direction: "OUT")
	gender: Gender @relation(name: "HAS_GENDER", direction: "OUT")
	maritalStatus: MaritalStatus @relation(name: "IS", direction: "OUT")
}

type Gender {
	gender: String
	members: [Member] @relation(name: "HAS_GENDER", direction: "IN")
}

type MaritalStatus {
	status: String
	members: [Member] @relation(name: "HAS_MARRITAL_STATUS", direction: "IN")
}

type Leader {
	rank: String
	title: String
	members: [Member] @relation(name: "IS_A", direction: "OUT")
	appointmentDate: TimeGraph @relation(name: "APPOINTED_ON", direction: "OUT")
	centerStartDate: TimeGraph @relation(name: "STARTED_ON", direction: "OUT")
	transferDate: TimeGraph @relation(name: "TRANSFERED_ON", direction: "OUT")
	terminationDate: TimeGraph @relation(name: "TERMINATED_ON", direction: "OUT")
}

type TimeGraph {
	date: Date
}

type Occupation {
	occupation: String
	members: [Member] @relation(name: "HAS_OCCUPATION", direction: "IN")
}

type Town {
	name: String
	leader: Member @relation(name: "LEADS", direction: "IN")
	basontas: [Sonta] @relation(name: "HAS_SONTA", direction: "OUT")
}

type Community {
	name: String
	leader: Member @relation(name: "LEADS", direction: "IN")
	town: Town @relation(name: "HAS_COMMUNITY", direction: "IN")
}

type Centre {
	name: String
	community: Community @relation(name: "HAS_CENTRE", direction: "IN")
	bacentas: [Bacenta] @relation(name: "HAS_BACENTA", direction: "IN")
	leader: Member @relation(name: "LEADS", direction: "IN")
	members: [Member] @relation(name: "BELONGS_TO", direction: "IN")
}

type Bacenta {
	name: String
	centre: Centre @relation(name: "HAS_BACENTA", direction: "IN")
	leader: Member @relation(name: "LEADS", direction: "IN")
	members: [Member] @relation(name: "BELONGS_TO", direction: "IN")
}

type Sonta {
	name: String
	leader: Member @relation(name: "LEADS", direction: "IN")
	town: Town @relation(name: "HAS_SONTA", direction: "IN")
}

#total number of
type Query {
	townCount: Int! @cypher(statement: "MATCH (t:Town) RETURN COUNT(t)")
	communityCount: Int! @cypher(statement: "MATCH (c:Community) RETURN COUNT(c)")
	centreCount: Int! @cypher(statement: "MATCH (c:Centre) RETURN COUNT(c)")
	sontaCount: Int! @cypher(statement: "MATCH (s:Sonta) RETURN COUNT(s)")
	memberCount: Int! @cypher(statement: "MATCH (m:Member) RETURN COUNT(m)")
}
